# -*- coding: utf-8 -*-

import json
import os
import sys
import time

import requests
from PIL import Image
from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_Form(QtWidgets.QWidget):
    def __init__(self,parent=None):
        super(Ui_Form, self).__init__(parent)
        self.setupUi()
        self.Button_status()
        self.Users()

    def Users(self):
        #path = os.path.abspath(__file__)  #显示当前文件的地址
        path = os.path.dirname(__file__)  #显示当前文件的地址
        with open('{}/user.json'.format(path),'r',encoding='utf-8')as fp:
            self.user = json.loads(fp.read())
        language = self.user["default"]['language']
        #print(language)
        self.define_name = self.user['interface_name'][0][language][0]
        #print(self.define_name)

        self.setWindowTitle(self.define_name['setWindowTitle'])
        self.select_file.setText(self.define_name['select_file'])
        self.select_folder.setText(self.define_name['select_folder'])
        self.do_task_pushButton.setText(self.define_name['go_task_pushButton'])
        self.cls_pushButton.setText(self.define_name['cls_pushButton'])
        self.set_value_zoom.setText(self.define_name['set_value_zoom'])
        self.set_value_height.setText(self.define_name['set_value_height'])
        self.set_value_width.setText( self.define_name['set_value_width'])
        self.label.setText(self.define_name['status'])
        self.value_height.setText(self.define_name['value_height'])
        self.value_width.setText(self.define_name['value_width'])
        self.value_zoom.setText(self.define_name['value_zoom'])
        self.language_button.setText(self.define_name['setlanguage'])
        self.set_default_height=self.user["default"]["height"]
        self.set_default_width=self.user["default"]["width"]
        

        

    def setupUi(self):
        self.resize(350, 300)
        self.setMinimumSize(350, 300)
        self.setMaximumSize(350, 300)

        self.textEdit = QtWidgets.QTextEdit(self)
        self.textEdit.setGeometry(QtCore.QRect(10, 10, 180, 200))
        self.textEdit.setObjectName("textEdit")
        self.gridLayoutWidget = QtWidgets.QWidget(self)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(10, 220, 181, 61))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.select_file = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.select_file.setObjectName("select_file")
        self.gridLayout.addWidget(self.select_file, 1, 0, 1, 1)
        self.select_folder = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.select_folder.setObjectName("select_folder")
        self.gridLayout.addWidget(self.select_folder, 1, 1, 1, 1)
        self.do_task_pushButton = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.do_task_pushButton.setObjectName("do_task_pushButton")
        self.gridLayout.addWidget(self.do_task_pushButton, 2, 0, 1, 1)
        self.cls_pushButton = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.cls_pushButton.setObjectName("cls_pushButton")
        self.gridLayout.addWidget(self.cls_pushButton, 2, 1, 1, 1)
        self.verticalLayoutWidget = QtWidgets.QWidget(self)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(200, 120, 77, 81))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(5)
        self.verticalLayout.setObjectName("verticalLayout")
        self.set_value_zoom = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.set_value_zoom.setObjectName("set_value_zoom")
        self.verticalLayout.addWidget(self.set_value_zoom)
        self.set_value_height = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.set_value_height.setObjectName("set_value_height")
        self.verticalLayout.addWidget(self.set_value_height)
        self.set_value_width = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.set_value_width.setObjectName("set_value_width")
        self.verticalLayout.addWidget(self.set_value_width)
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(280, 120, 31, 81))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setSpacing(5)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.value_zoom = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        self.value_zoom.setAlignment(QtCore.Qt.AlignCenter)
        self.value_zoom.setObjectName("value_zoom")
        self.verticalLayout_2.addWidget(self.value_zoom)
        self.value_height = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        self.value_height.setTextFormat(QtCore.Qt.AutoText)
        self.value_height.setAlignment(QtCore.Qt.AlignCenter)
        self.value_height.setObjectName("value_height")
        self.verticalLayout_2.addWidget(self.value_height)
        self.value_width = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        self.value_width.setAlignment(QtCore.Qt.AlignCenter)
        self.value_width.setObjectName("value_width")
        self.verticalLayout_2.addWidget(self.value_width)
        self.label = QtWidgets.QLabel(self)
        self.label.setGeometry(QtCore.QRect(200, 20, 100, 81))
        self.label.setScaledContents(False)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.value_zoom.setText(" ")
        self.value_width.setText(" ")
        self.value_height.setText(" ")


        self.language_button = QtWidgets.QPushButton(self)
        self.language_button.setGeometry(QtCore.QRect(200,222,75,25))
        self.language_button.setObjectName('set_language')


        QtCore.QMetaObject.connectSlotsByName(self)

   

    # 按照输入的缩放值进行缩放
    def set_zoom_button_clicked(self):
        text, ok = QtWidgets.QInputDialog.getText(self, '请输入缩放值', '缩放值', QtWidgets.QLineEdit.Normal, '')
        if ok:
            try:
                value_zoom = float(text)
            except ValueError:
                QtWidgets.QMessageBox.warning(self, '设置缩放值', '输入错误')
            else:
                self.value_zoom.setText(str(value_zoom))
                self.reesh_setting(0)

    # 根据高度的缩放比例等比例缩放
    def set_height_button_clicked(self):
        text, ok = QtWidgets.QInputDialog.getText(self, '请输入高度', '高度：', QtWidgets.QLineEdit.Normal, '')
        if ok:
            try:
                value_height = int(text)
            except ValueError:
                QtWidgets.QMessageBox.warning(self, '设置高度', '输入错误')
            else:
                self.value_height.setText(str(value_height))
                self.reesh_setting(1)

    # 根据宽度的缩放比例等比例缩放
    def set_width_button_clicked(self):
        text, ok = QtWidgets.QInputDialog.getText(self, '请输入宽度', '宽度', QtWidgets.QLineEdit.Normal, '')
        if ok:  
            try:
                value_width = int(text)
            except ValueError:
                QtWidgets.QMessageBox.warning(self, '设置宽度', '输入错误')
            else:
                self.value_width.setText(str(value_width))
                self.reesh_setting(1)

    def file_button_clicked(self):
        self.filename, ok = QtWidgets.QFileDialog.getOpenFileName(self, '选择文件',
                                                                  filter='ALL FILES(*.*);;JPEG Files(*.jpg);;PNG Files(*.png)')
        if ok:
            self.img = self.get_image_size(self.filename)
            if self.img == 'error':
                self.label.setText('不是图像格式！')
            # print(s.size) # 元组
            # print(s.mode) # 模式
            # print(s.format) # 原格式
            # print(s.width, s.height) # 宽度、高度
            else:
                
                self.textEdit.append(self.filename)
                label_status = '''图片信息\n尺寸:{0}\n图片模式:{1}\n图片格式:{2}'''.format(str(self.img.size), str(self.img.mode),
                                  str(self.img.format))
                self.label.setText(label_status)



    def get_image_size(self, path):
        try:
            im = Image.open(path)
            return im
        except:
            return 'error'

    def reesh_setting(self, kind):
        if kind == 0:
            self.set_value_height.setEnabled(0)
            self.set_value_width.setEnabled(0)
            self.value_height.setText(' ')
            self.value_width.setText(' ')
            self.label.setText('不可设置\n宽度和高度！')
        elif kind == 1:
            self.set_value_zoom.setEnabled(0)
            self.value_zoom.setText(' ')
            self.label.setText('不可设置\n缩放值')

    def GO_task(self):
        if self.value_zoom.text() !=   ' ':
            self.TASK(0)
        elif  self.value_width.text() != ' ' and self.value_height.text() != ' ':
            
            self.TASK(1)
        else:
            QtWidgets.QMessageBox.information(self, '', '请设置宽度、高度或者缩放值！')            
            print('go task')
        



    def TASK(self,tastus):
        # 判断是否缩放值，则多少
        if tastus == 0:
            if self.value_zoom.text()== ' ':
                Sized = 100
                
            else:
                Sized = (float(self.value_zoom.text()))
        # 判断宽高度的多少
        elif tastus == 1:
            if self.value_width.text()== ' ' and self.value_height.text()  ==' ':
                Sized = (self.set_default_width,self.set_default_width)
            else:
                Sized = (int(self.value_width.text()), int(self.value_height.text()))
        # 抽取数据，列表
        lis = self.textEdit.toPlainText().split('\n')
        # print(lis)
        out_list=[]
        # 替换
        for i in range(0,len(lis)):
            if lis[i][-4:] == '.jpg':
                out_list.append(lis[i].replace('.jpg', '_out.jpg'))
            elif lis[i][-4:] == '.png':
                out_list.append(lis[i].replace('.png', '_out.png'))
            else:
                self.label.setText('没有这个图片格式')

        self.alter_size(lis,out_list,Sized,tastus)

        print('完毕')

        
#
    def alter_size(self,img,out,size,tastus): 
        
        for i in range(0,len(img)):
            time.sleep(0.5)
            Img = Image.open(img[i])
            # set zoom
            if tastus == 0:
                h = int(Img.height/size)
                w = int(Img.width/size)
                # 处理jpg
                if img[i][-3:]=='jpg':
                    #print(h,w)
                    self.label.setText('设置尺寸后是:\n({},{})'.format(w,h))
                    out_img = Img.resize((w,h), Image.ADAPTIVE)
                    out_img = out_img.convert('RGB')
                    Img.close()
                    out_img.save(out[i])
                #处理png
                elif img[i][-3:]=='png':
                    self.label.setText('设置尺寸后是:\n({},{})'.format(w,h))
                    out_img = Img.resize((w,h), Image.ADAPTIVE)
                    out_img = out_img.convert('RGBA')
                    Img.close()
                    out_img.save(out[i])
            
            # set the width and the height
            elif tastus == 1:
                w = int(Img.width/size(0))
                h = int(Img.height/size(1))
                 # 处理jpg
                if img[i][-3:]=='jpg':
                    #print(h,w)
                    self.label.setText('设置尺寸后是:\n({},{})'.format(w,h))
                    out_img = Img.resize((w,h), Image.ADAPTIVE)
                    out_img = out_img.convert('RGB')
                    Img.close()
                    out_img.save(out[i])
                #处理png
                elif img[i][-3:]=='png':
                    self.label.setText('设置尺寸后是:\n({},{})'.format(w,h))
                    out_img = Img.resize((w,h), Image.ADAPTIVE)
                    out_img = out_img.convert('RGBA')
                    Img.close()
                    out_img.save(out[i])
            else:
                print("未知bug")


    def cls_task(self):
        self.value_height.setText(' ')
        self.value_width.setText(' ')
        self.value_zoom.setText(' ')
        self.textEdit.clear()
        self.set_value_height.setEnabled(1)
        self.set_value_width.setEnabled(1)
        self.set_value_zoom.setEnabled(1)
        self.label.setText('清理好了！')
        

    def Button_status(self):
        self.select_folder.setEnabled(0)
        self.language_button.setEnabled(0)
        self.do_task_pushButton.clicked.connect(self.GO_task)
        self.cls_pushButton.clicked.connect(self.cls_task)
        self.set_value_zoom.clicked.connect(self.set_zoom_button_clicked)
        self.set_value_height.clicked.connect(self.set_height_button_clicked)
        self.set_value_width.clicked.connect(self.set_width_button_clicked)
        self.select_file.clicked.connect(self.file_button_clicked)


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    uf = Ui_Form()
    uf.show()
    sys.exit(app.exec_())
